package com.badr.Ecommerce_store_JEE.Controller;

/*
 * Generated By IDEA
 * User: Badr Eddine
 *
 */

import com.badr.Ecommerce_store_JEE.Util.DB;
import com.badr.Ecommerce_store_JEE.beans.Product;
import com.badr.Ecommerce_store_JEE.beans.User;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.swing.*;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.function.Supplier;

public class Controller extends HttpServlet {
    private static final long serialVersionUID = 1L;
    ArrayList<Product> list = new ArrayList<>();
    static ArrayList<String> cartlist = new ArrayList<>();
    ArrayList<User> userList = new ArrayList<>();
    HttpSession session;
    Properties props;
    @Override
    public void init() throws ServletException {
        super.init();
        //get the app.properties file
        InputStream inputStream = getServletContext().getResourceAsStream("/WEB-INF/app.properties");
        props = new Properties();
        try {
            props.load(inputStream);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String page = request.getParameter("page");
        if (page == null || page.equals("index")) {

            //fetch products from db
            DB db = new DB(props);
            try {
                list = db.fetch();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            session = request.getSession();
            session.setAttribute("cartlist", cartlist);
            session.setAttribute("list", list);

            request.getRequestDispatcher("index.jsp").forward(request, response);
        } else {
            doPost(request, response);
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        //getting the page parameter
        String page = request.getParameter("page");
        if (page.equals("login")) {
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }

        if (page.equals("sign-up")) {
            request.getRequestDispatcher("signup.jsp").forward(request, response);
        }

        // all the following code was written by me hhhh.
        // Unless it doesn't work, then I have no idea who wrote it :) .

        //go to sign up
        if (page.equals("sign-up-form")) {
            String name = request.getParameter("name");
            String email = request.getParameter("email");
            String username = request.getParameter("username");
            String address = request.getParameter("address");
            String password_1 = request.getParameter("password_1");
            String password_2 = request.getParameter("password_2");

            //check if the two password match
            if (password_1.equals(password_2)) {
                //creating new user and saving to db
                User user = new User();
                user.setAddress(address);
                user.setEmail(email);
                user.setName(name);
                user.setUsername(username);
                user.setPassword(password_1);

                DB db = new DB(props);
                try {
                    db.addUser(user);
                } catch (SQLException e) {

                    e.printStackTrace();
                }


                request.setAttribute("username", username);
                request.setAttribute("msg", "Account created successfully, Please Login!");
                request.getRequestDispatcher("login.jsp").forward(request, response);

            } else {
                request.setAttribute("msg", "The two passwords do not match");
                request.setAttribute("name", name);
                request.setAttribute("address", address);
                request.setAttribute("email", email);
                request.setAttribute("username", username);
                request.getRequestDispatcher("signup.jsp").forward(request, response);
            }

        }

        //go to login
        if (page.equals("login-form")) {

            String username = request.getParameter("username");
            String password = request.getParameter("password");

            //check if user exists
            DB db = new DB(props);
            User user = new User();

            boolean status = false;

            try {
                status = db.checkUser(username, password);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            //if exists make a session then redirect to index
            if (status) {
                session = request.getSession();
                session.setAttribute("session", session);

                try {
                    userList = db.fetchUser();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                session.setAttribute("address", user.fetchadd(userList, username));
                session.setAttribute("email", user.fetchemail(userList, username));
                session.setAttribute("name", user.fetchname(userList, username));
                session.setAttribute("username", username);
                request.getRequestDispatcher("index.jsp").forward(request, response);
            } else {
                request.setAttribute("msg", "Invalid Credentials");
                request.setAttribute("username", username);
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }

        }

        //logout
        if (page.equals("logout")) {
            session = request.getSession();
            session.invalidate();

            session = request.getSession();
            cartlist.clear();
            session.setAttribute("cartlist", cartlist);
            session.setAttribute("list", list);

            request.getRequestDispatcher("index.jsp").forward(request, response);
        }

        if (page.equals("mobiles") || page.equals("laptops") || page.equals("clothing") || page.equals("home-decor") || page.equals("all-products")) {
            DB db = new DB(props);
            try {
                list = db.fetch();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            //wow you're reading the code !!!!!!
            request.setAttribute("list", list);

            switch (page) {
                case "mobiles":
                    request.getRequestDispatcher("mobiles.jsp").forward(request, response);
                    break;
                case "laptops":
                    request.getRequestDispatcher("laptops.jsp").forward(request, response);
                    break;
                case "clothing":
                    request.getRequestDispatcher("clothing.jsp").forward(request, response);
                    break;
                case "home-decor":
                    request.getRequestDispatcher("home-decor.jsp").forward(request, response);
                    break;
                case "all-products":
                    request.getRequestDispatcher("all-products.jsp").forward(request, response);
                    break;
            }

        }


        //got to cart page
        if (page.equals("showcart")) {
            request.getRequestDispatcher("cart.jsp").forward(request, response);
        }

        //add to cart
        if (page.equals("addtocart")) {
            String id = request.getParameter("id");
            String action = request.getParameter("action");
            Product p = new Product();
            boolean check = p.check(cartlist, id);

            if (check)
                //display msg
                JOptionPane.showMessageDialog(
                        ((Supplier<JDialog>) () -> {
                            final JDialog dialog = new JDialog();
                            dialog.setAlwaysOnTop(true);
                            return dialog;
                        }).get(), "Product already in cart !!!");
            else {
                //add to list and display add success msg
                cartlist.add(id);
                JOptionPane.showMessageDialog(
                        ((Supplier<JDialog>) () -> {
                            final JDialog dialog = new JDialog();
                            dialog.setAlwaysOnTop(true);
                            return dialog;
                        }).get(), "Product added to cart");            }

            if (action.equals("index"))
                request.getRequestDispatcher("index.jsp").forward(request, response);
            if (action.equals("allproducts"))
                request.getRequestDispatcher("all-products.jsp").forward(request, response);
            if (action.equals("clothing"))
                request.getRequestDispatcher("clothing.jsp").forward(request, response);
            if (action.equals("home-decor"))
                request.getRequestDispatcher("home-decor.jsp").forward(request, response);
            if (action.equals("laptops"))
                request.getRequestDispatcher("laptops.jsp").forward(request, response);
            if (action.equals("mobiles"))
                request.getRequestDispatcher("mobiles.jsp").forward(request, response);
        }

        //forward to success page
        if (page.equals("success")) {

            request.getRequestDispatcher("success.jsp").forward(request, response);
			
			/*session = request.getSession();
			 cartlist.clear();
			 session.setAttribute("cartlist", cartlist);*/
        }

        //remove item from cart
        if (page.equals("remove")) {
            String id = request.getParameter("id");
            Product p = new Product();
            cartlist = p.remove(cartlist, id);

            session = request.getSession();
            session.setAttribute("cartlist", cartlist);
            request.getRequestDispatcher("cart.jsp").forward(request, response);
        }

        //sort using price
        if (page.equals("price-sort")) {
            String price = request.getParameter("sort");
            String action = request.getParameter("action");
            Product p = new Product();
            if (price.equals("low-to-high"))
                list = p.lowtohigh(list);
            else
                list = p.hightolow(list);

            session.setAttribute("list", list);

            if (action.equals("index"))
                request.getRequestDispatcher("index.jsp").forward(request, response);
            if (action.equals("all-products"))
                request.getRequestDispatcher("all-products.jsp").forward(request, response);
            if (action.equals("mobiles"))
                request.getRequestDispatcher("mobiles.jsp").forward(request, response);
            if (action.equals("laptops"))
                request.getRequestDispatcher("laptops.jsp").forward(request, response);
            if (action.equals("clothing"))
                request.getRequestDispatcher("clothing.jsp").forward(request, response);
            if (action.equals("home-decor"))
                request.getRequestDispatcher("home-decor.jsp").forward(request, response);
        }
    }

}
